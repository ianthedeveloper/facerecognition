{"ast":null,"code":"var _jsxFileName = \"/home/mungaii/Desktop/MUNGAII/MUNGAII/Web Dev/GitHub-Projects/facerecognition/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   // const PAT = '70d2b99eec204856bc2886b35b22b05d';\n//   const PAT = '86a7c1fb3a564cef9792728daeaae130';\n//   const USER_ID = 'ianthedeveloper';\n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n\n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//         \"user_id\": USER_ID,\n//         \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//         {\n//             \"data\": {\n//                 \"image\": {\n//                     \"url\": IMAGE_URL\n//                     // \"base64\": IMAGE_BYTES_STRING\n//                 }\n//             }\n//         }\n//     ]\n//   });\n\n//   const requestOptions = {\n//   method: 'POST',\n//   headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions;\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = event => {\n      // const MODEL_ID = 'face-detection';\n      // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n\n      this.setState({\n        imageUrl: this.state.input\n      });\n\n      // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID +  \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n      // .then(response => {\n      //   response.json()\n      //   console.log(response);\n      // })\n      // .then(result => {\n      //   console.log(\"Result\", result); // Log the entire result object to see its structure\n      //   if (result && result.outputs && result.outputs.length > 0) {\n      //       const regions = result.outputs[0].data.regions;\n      //       regions.forEach(region => {\n      //           // Accessing and rounding the bounding box values\n      //           const boundingBox = region.region_info.bounding_box;\n      //           const topRow = boundingBox.top_row.toFixed(3);\n      //           const leftCol = boundingBox.left_col.toFixed(3);\n      //           const bottomRow = boundingBox.bottom_row.toFixed(3);\n      //           const rightCol = boundingBox.right_col.toFixed(3);\n\n      //           region.data.concepts.forEach(concept => {\n      //               // Accessing and rounding the concept value\n      //               const name = concept.name;\n      //               const value = concept.value.toFixed(4);\n\n      //               console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n      //           });\n      //       });\n      //   } else {\n      //       console.log('Invalid response structure'); // Handle invalid response\n      //   }\n      // })\n\n      app.models.predict('face-detection', this.state.input).then(response => {\n        console.log('Response', response);\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(error => console.log(\"Ooops! There was an error\", error));\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      user: '',\n      displayFaceBox: '',\n      calculateFaceLocation: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        className: \"particlesBg\",\n        num: 331,\n        type: \"fountain\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageProcessingField, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Facerecognition, {\n        imageUrl: this.state.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Clarifai","Navigation","Logo","Rank","ImageProcessingField","Facerecognition","jsxDEV","_jsxDEV","App","constructor","onInputChange","event","console","log","target","value","setState","input","onButtonSubmit","imageUrl","state","app","models","predict","then","response","fetch","method","headers","body","JSON","stringify","id","user","json","count","Object","assign","entries","displayFaceBox","calculateFaceLocation","catch","error","render","className","children","num","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mungaii/Desktop/MUNGAII/MUNGAII/Web Dev/GitHub-Projects/facerecognition/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\n\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   // const PAT = '70d2b99eec204856bc2886b35b22b05d';\n//   const PAT = '86a7c1fb3a564cef9792728daeaae130';\n//   const USER_ID = 'ianthedeveloper';\n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n  \n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//         \"user_id\": USER_ID,\n//         \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//         {\n//             \"data\": {\n//                 \"image\": {\n//                     \"url\": IMAGE_URL\n//                     // \"base64\": IMAGE_BYTES_STRING\n//                 }\n//             }\n//         }\n//     ]\n//   });\n\n//   const requestOptions = {\n//   method: 'POST',\n//   headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions;\n\n// }\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n        input: '',\n        imageUrl: '',\n        user: '',\n        displayFaceBox: '',\n        calculateFaceLocation: ''\n    }\n  }\n\n  onInputChange = (event) => {\n    console.log(event.target.value);\n    this.setState({input: event.target.value});\n  }\n  \n  onButtonSubmit = (event) => {\n    // const MODEL_ID = 'face-detection';\n    // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n\n    this.setState({imageUrl: this.state.input});\n\n    // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID +  \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n    // .then(response => {\n    //   response.json()\n    //   console.log(response);\n    // })\n    // .then(result => {\n    //   console.log(\"Result\", result); // Log the entire result object to see its structure\n    //   if (result && result.outputs && result.outputs.length > 0) {\n    //       const regions = result.outputs[0].data.regions;\n    //       regions.forEach(region => {\n    //           // Accessing and rounding the bounding box values\n    //           const boundingBox = region.region_info.bounding_box;\n    //           const topRow = boundingBox.top_row.toFixed(3);\n    //           const leftCol = boundingBox.left_col.toFixed(3);\n    //           const bottomRow = boundingBox.bottom_row.toFixed(3);\n    //           const rightCol = boundingBox.right_col.toFixed(3);\n  \n    //           region.data.concepts.forEach(concept => {\n    //               // Accessing and rounding the concept value\n    //               const name = concept.name;\n    //               const value = concept.value.toFixed(4);\n  \n    //               console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n    //           });\n    //       });\n    //   } else {\n    //       console.log('Invalid response structure'); // Handle invalid response\n    //   }\n    // })\n\n\n\n    app.models.predict('face-detection', this.state.input)\n    .then(response => {\n      console.log('Response', response)\n      if (response) {\n        fetch('http://localhost:3000/image', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id\n          })\n        })\n          .then(response => response.json())\n          .then(count => {\n            this.setState(Object.assign(this.state.user, { entries: count}))\n          })\n\n      }\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n    .catch(error => console.log(\"Ooops! There was an error\", error));\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n        <Navigation/>\n        <Logo/>\n        <Rank/>\n        <ImageProcessingField \n          onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}  \n        />\n        <Facerecognition imageUrl={this.state.imageUrl}  />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}