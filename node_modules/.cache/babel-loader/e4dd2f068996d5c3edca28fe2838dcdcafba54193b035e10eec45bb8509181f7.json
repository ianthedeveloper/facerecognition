{"ast":null,"code":"var _jsxFileName = \"/home/mungaii/Desktop/MUNGAII/MUNGAII/Web Dev/GitHub-Projects/facerecognition/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = event => {\n      console.log(\"Click\");\n\n      ///////////////////////////////////////////////////////////////////////////////////////////////////\n      // In this section, we set the user authentication, user and app ID, model details, and the URL\n      // of the image we want as an input. Change these strings to run your own example.\n      //////////////////////////////////////////////////////////////////////////////////////////////////\n\n      // Your PAT (Personal Access Token) can be found in the Account's Security section\n      const PAT = '70d2b99eec204856bc2886b35b22b05d';\n      // Specify the correct user_id/app_id pairings\n      // Since you're making inferences outside your app's scope\n      const USER_ID = 'clarifai';\n      const APP_ID = 'main';\n      // Change these to whatever model and image URL you want to use\n      const MODEL_ID = 'face-detection';\n      const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n      const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n      ///////////////////////////////////////////////////////////////////////////////////\n      // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      ///////////////////////////////////////////////////////////////////////////////////\n\n      const raw = JSON.stringify({\n        \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n        },\n        \"inputs\": [{\n          \"data\": {\n            \"image\": {\n              \"url\": IMAGE_URL\n              // \"base64\": IMAGE_BYTES_STRING\n            }\n          }\n        }]\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n        },\n        body: raw\n      };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.json()).then(result => {\n        const regions = result.outputs[0].data.regions;\n        regions.forEach(region => {\n          // Accessing and rounding the bounding box values\n          const boundingBox = region.region_info.bounding_box;\n          const topRow = boundingBox.top_row.toFixed(3);\n          const leftCol = boundingBox.left_col.toFixed(3);\n          const bottomRow = boundingBox.bottom_row.toFixed(3);\n          const rightCol = boundingBox.right_col.toFixed(3);\n          region.data.concepts.forEach(concept => {\n            // Accessing and rounding the concept value\n            const name = concept.name;\n            const value = concept.value.toFixed(4);\n            console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n          });\n        });\n      }).catch(error => console.log('error', error));\n    };\n    this.state = {\n      input: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        className: \"particlesBg\",\n        num: 331,\n        type: \"fountain\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageProcessingField, {\n        onInputChange: this.onInputChange,\n        onButtonClick: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Facerecognition, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","Navigation","Logo","Rank","ImageProcessingField","Facerecognition","jsxDEV","_jsxDEV","App","constructor","onInputChange","event","console","log","target","value","onButtonSubmit","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","result","regions","outputs","data","forEach","region","boundingBox","region_info","bounding_box","topRow","top_row","toFixed","leftCol","left_col","bottomRow","bottom_row","rightCol","right_col","concepts","concept","name","catch","error","state","input","render","className","children","num","type","bg","fileName","_jsxFileName","lineNumber","columnNumber","onButtonClick"],"sources":["/home/mungaii/Desktop/MUNGAII/MUNGAII/Web Dev/GitHub-Projects/facerecognition/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: ''\n    }\n  }\n\n  onInputChange = (event) => {\n    console.log(event.target.value);\n  }\n\n  onButtonSubmit = (event) => {\n    console.log(\"Click\");\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = '70d2b99eec204856bc2886b35b22b05d';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'clarifai';\nconst APP_ID = 'main';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n///////////////////////////////////////////////////////////////////////////////////\n// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n///////////////////////////////////////////////////////////////////////////////////\n\nconst raw = JSON.stringify({\n    \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n    },\n    \"inputs\": [\n        {\n            \"data\": {\n                \"image\": {\n                    \"url\": IMAGE_URL\n                    // \"base64\": IMAGE_BYTES_STRING\n                }\n            }\n        }\n    ]\n});\n\nconst requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n};\n\n// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n// this will default to the latest version_id\n\nfetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    .then(response => response.json())\n    .then(result => {\n\n        const regions = result.outputs[0].data.regions;\n\n        regions.forEach(region => {\n            // Accessing and rounding the bounding box values\n            const boundingBox = region.region_info.bounding_box;\n            const topRow = boundingBox.top_row.toFixed(3);\n            const leftCol = boundingBox.left_col.toFixed(3);\n            const bottomRow = boundingBox.bottom_row.toFixed(3);\n            const rightCol = boundingBox.right_col.toFixed(3);\n\n            region.data.concepts.forEach(concept => {\n                // Accessing and rounding the concept value\n                const name = concept.name;\n                const value = concept.value.toFixed(4);\n\n                console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n                \n            });\n        });\n\n    })\n    .catch(error => console.log('error', error));\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n        <Navigation/>\n        <Logo/>\n        <Rank/>\n        <ImageProcessingField \n          onInputChange={this.onInputChange} onButtonClick={this.onButtonSubmit}  \n        />\n        <Facerecognition/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}