{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { Component } from 'react';\n// import './App.css';\n// import ParticlesBg from 'particles-bg';\n// import Navigation from './components/Navigation/Navigation';\n// import Logo from './components/Logo/Logo';\n// import Rank from './components/Rank/Rank';\n// import ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\n// import Facerecognition from './components/Facerecognition/Facerecognition';\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   const PAT = 'Enter your PAT';\n//   const USER_ID = 'ianthedeveloper';\n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n\n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//         \"user_id\": USER_ID,\n//         \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//         {\n//             \"data\": {\n//                 \"image\": {\n//                     \"url\": IMAGE_URL\n//                     // \"base64\": IMAGE_BYTES_STRING\n//                 }\n//             }\n//         }\n//     ]\n//   });\n\n//   const requestOptions = {\n//   method: 'POST',\n//   headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions;\n\n// }\n\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//         input: '',\n//         imageUrl: ''\n//     }\n//   }\n\n//   onInputChange = (event) => {\n//     console.log(\"Input:\", event.target.value);\n//     this.setState({input: event.target.value});\n//   }\n\n//   onButtonSubmit = () => {\n//     const MODEL_ID = 'face-detection';\n//     const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n//     this.setState({imageUrl: this.state.input});\n\n//     fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n//     .then(response => {\n//       response.json()\n//       console.log(\"Response\", response);\n//     })\n//     .then(result => {\n//       console.log(\"Result\", result); // Log the entire result object to see its structure\n//       if (result && result.outputs && result.outputs.length > 0) {\n//           const regions = result.outputs[0].data.regions;\n//           regions.forEach(region => {\n//               // Accessing and rounding the bounding box values\n//               const boundingBox = region.region_info.bounding_box;\n//               const topRow = boundingBox.top_row.toFixed(3);\n//               const leftCol = boundingBox.left_col.toFixed(3);\n//               const bottomRow = boundingBox.bottom_row.toFixed(3);\n//               const rightCol = boundingBox.right_col.toFixed(3);\n\n//               region.data.concepts.forEach(concept => {\n//                   // Accessing and rounding the concept value\n//                   const name = concept.name;\n//                   const value = concept.value.toFixed(4);\n\n//                   console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n//               });\n//           });\n//       } else {\n//           console.log('Invalid response structure'); // Handle invalid response\n//       }\n//     })\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n//         <Navigation/>\n//         <Logo/>\n//         <Rank/>\n//         <ImageProcessingField \n//           onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}  \n//         />\n//         <Facerecognition imageUrl={this.state.imageUrl}  />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n// CODE FROM Discord\n\n// import React, { useState } from 'react';\n// import './App.css';\n// import ParticlesBg from 'particles-bg';\n// import Clarifai from 'clarifai';\n// import Navigation from './components/Navigation/Navigation';\n// import Logo from './components/Logo/Logo';\n// import Rank from './components/Rank/Rank';\n// import ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\n// import Facerecognition from './components/Facerecognition/Facerecognition';\n\n// const app = new Clarifai.App({\n//   apiKey: 'b99b35c39d5a491d956f588c06afd1a0'\n// });\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n\n//   const PAT = '70d2b99eec204856bc2886b35b22b05d'; \n//   const USER_ID = 'ianthedeveloper';       \n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n\n//   const raw = JSON.stringify({\n//       \"user_app_id\": {\n//           \"user_id\": USER_ID,\n//           \"app_id\": APP_ID\n//       },\n//       \"inputs\": [\n//           {\n//               \"data\": {\n//                   \"image\": {\n//                       \"url\": IMAGE_URL\n//                   }\n//               }\n//           }\n//       ]\n//   });\n\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions;\n\n// }\n\n// function App () {\n//   const MODEL_ID = 'face-detection';   \n//   const [input, setInput] = useState('');\n//   const [imageUrl, setImageUrl] = useState('');\n\n//   const onInputChange = (event) => {\n//     console.log(event.target.value);\n//     setInput(input : event.target.value);\n//   }\n//   const onButtonSubmit = () => {\n//     setImageUrl(input);\n//     app.models.predict('face-detection',input)\n//     fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", \n//     returnClarifaiRequestOptions(input))\n//     .then(response => response.json())\n//     .then(result => console.log(result))\n//     .then(\n//       function(response){\n//         console.log(response);\n//       },\n//       function(err){\n\n//       }\n//     );\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n//         <Navigation/>\n//         <Logo/>\n//         <Rank/>\n//         <ImageProcessingField \n//           onInputChange={onInputChange} onButtonSubmit={onButtonSubmit}  \n//         />\n//         <Facerecognition imageUrl={imageUrl}  />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n// CORRECTED DISCORD CODE BY ChatGPT\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\nimport axios from 'axios';\nwindow.process = {};\nconst app = new Clarifai.App({\n  apiKey: 'b99b35c39d5a491d956f588c06afd1a0'\n});\nconst returnClarifaiRequestOptions = imageUrl => {\n  const PAT = '70d2b99eec204856bc2886b35b22b05d';\n  const USER_ID = 'ianthedeveloper';\n  const APP_ID = 'my-first-application';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT // Added space after 'Key'\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nfunction App() {\n  _s();\n  const MODEL_ID = 'face-detection';\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const onInputChange = event => {\n    console.log(event.target.value);\n    setInput(event.target.value); // Removed wrapping input with curly braces\n  };\n\n  // const onButtonSubmit = () => {\n  //   setImageUrl(input);\n  //   app.models.predict('face-detection', input)\n  //     .then(response => {\n  //       console.log(response);\n  //       return fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(input))\n  //     })\n  //     .then(response => {\n  //       response.json()\n  //       // console.log(\"Response: \", response)\n  //     })\n  //     .then(result => console.log(result))\n  //     .catch(error => console.log(\"There was an error\", error));\n  // }\n\n  // return (\n  //   <div className=\"App\">\n  //     <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n  //     <Navigation />\n  //     <Logo />\n  //     <Rank />\n  //     <ImageProcessingField\n  //       onInputChange={onInputChange} onButtonSubmit={onButtonSubmit}\n  //     />\n  //     <Facerecognition imageUrl={imageUrl} />\n  //   </div>\n  // );\n\n  const onButtonSubmit = () => {\n    setImageUrl(input);\n    app.models.predict('face-detection', input).then(response => {\n      console.log(response);\n      // Assuming you need to pass the response to the second request\n      return fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(input)).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(result => {\n        console.log(result);\n        // Further processing of result if needed\n      }).catch(error => {\n        console.error('Error while fetching:', error);\n      });\n    }).catch(error => {\n      console.error('Clarifai API error:', error);\n    });\n  };\n}\n_s(App, \"JW5NwbAvPX1OMPp546aOSBuP8gY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ParticlesBg","Clarifai","Navigation","Logo","Rank","ImageProcessingField","Facerecognition","axios","window","process","app","App","apiKey","returnClarifaiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","_s","MODEL_ID","input","setInput","setImageUrl","onInputChange","event","console","log","target","value","onButtonSubmit","models","predict","then","response","fetch","ok","Error","json","result","catch","error","_c","$RefreshReg$"],"sources":["/home/mungaii/Desktop/MUNGAII/Web Development/Projects/facerecognition/src/App.js"],"sourcesContent":["// import React, { Component } from 'react';\n// import './App.css';\n// import ParticlesBg from 'particles-bg';\n// import Navigation from './components/Navigation/Navigation';\n// import Logo from './components/Logo/Logo';\n// import Rank from './components/Rank/Rank';\n// import ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\n// import Facerecognition from './components/Facerecognition/Facerecognition';\n\n// const returnClarifaiRequestOptions = (imageUrl) => {\n//   const PAT = 'Enter your PAT';\n//   const USER_ID = 'ianthedeveloper';\n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n  \n//   const raw = JSON.stringify({\n//     \"user_app_id\": {\n//         \"user_id\": USER_ID,\n//         \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//         {\n//             \"data\": {\n//                 \"image\": {\n//                     \"url\": IMAGE_URL\n//                     // \"base64\": IMAGE_BYTES_STRING\n//                 }\n//             }\n//         }\n//     ]\n//   });\n\n//   const requestOptions = {\n//   method: 'POST',\n//   headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n//   };\n\n//   return requestOptions;\n\n// }\n\n// class App extends Component {\n//   constructor(){\n//     super();\n//     this.state = {\n//         input: '',\n//         imageUrl: ''\n//     }\n//   }\n\n//   onInputChange = (event) => {\n//     console.log(\"Input:\", event.target.value);\n//     this.setState({input: event.target.value});\n//   }\n\n//   onButtonSubmit = () => {\n//     const MODEL_ID = 'face-detection';\n//     const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n//     this.setState({imageUrl: this.state.input});\n\n//     fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", returnClarifaiRequestOptions(this.state.input))\n//     .then(response => {\n//       response.json()\n//       console.log(\"Response\", response);\n//     })\n//     .then(result => {\n//       console.log(\"Result\", result); // Log the entire result object to see its structure\n//       if (result && result.outputs && result.outputs.length > 0) {\n//           const regions = result.outputs[0].data.regions;\n//           regions.forEach(region => {\n//               // Accessing and rounding the bounding box values\n//               const boundingBox = region.region_info.bounding_box;\n//               const topRow = boundingBox.top_row.toFixed(3);\n//               const leftCol = boundingBox.left_col.toFixed(3);\n//               const bottomRow = boundingBox.bottom_row.toFixed(3);\n//               const rightCol = boundingBox.right_col.toFixed(3);\n\n//               region.data.concepts.forEach(concept => {\n//                   // Accessing and rounding the concept value\n//                   const name = concept.name;\n//                   const value = concept.value.toFixed(4);\n\n//                   console.log(`${name}: ${value} BBox: ${topRow}, ${leftCol}, ${bottomRow}, ${rightCol}`);\n//               });\n//           });\n//       } else {\n//           console.log('Invalid response structure'); // Handle invalid response\n//       }\n//     })\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n//         <Navigation/>\n//         <Logo/>\n//         <Rank/>\n//         <ImageProcessingField \n//           onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}  \n//         />\n//         <Facerecognition imageUrl={this.state.imageUrl}  />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CODE FROM Discord\n\n// import React, { useState } from 'react';\n// import './App.css';\n// import ParticlesBg from 'particles-bg';\n// import Clarifai from 'clarifai';\n// import Navigation from './components/Navigation/Navigation';\n// import Logo from './components/Logo/Logo';\n// import Rank from './components/Rank/Rank';\n// import ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\n// import Facerecognition from './components/Facerecognition/Facerecognition';\n\n\n\n// const app = new Clarifai.App({\n//   apiKey: 'b99b35c39d5a491d956f588c06afd1a0'\n// });\n  \n  \n// const returnClarifaiRequestOptions = (imageUrl) => {\n  \n//   const PAT = '70d2b99eec204856bc2886b35b22b05d'; \n//   const USER_ID = 'ianthedeveloper';       \n//   const APP_ID = 'my-first-application';\n//   const IMAGE_URL = imageUrl;\n  \n//   const raw = JSON.stringify({\n//       \"user_app_id\": {\n//           \"user_id\": USER_ID,\n//           \"app_id\": APP_ID\n//       },\n//       \"inputs\": [\n//           {\n//               \"data\": {\n//                   \"image\": {\n//                       \"url\": IMAGE_URL\n//                   }\n//               }\n//           }\n//       ]\n//   });\n\n//   const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key' + PAT\n//     },\n//     body: raw\n//   };\n    \n//   return requestOptions;\n\n// }\n  \n// function App () {\n//   const MODEL_ID = 'face-detection';   \n//   const [input, setInput] = useState('');\n//   const [imageUrl, setImageUrl] = useState('');\n  \n//   const onInputChange = (event) => {\n//     console.log(event.target.value);\n//     setInput(input : event.target.value);\n//   }\n//   const onButtonSubmit = () => {\n//     setImageUrl(input);\n//     app.models.predict('face-detection',input)\n//     fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", \n//     returnClarifaiRequestOptions(input))\n//     .then(response => response.json())\n//     .then(result => console.log(result))\n//     .then(\n//       function(response){\n//         console.log(response);\n//       },\n//       function(err){\n      \n//       }\n//     );\n//   }\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n//         <Navigation/>\n//         <Logo/>\n//         <Rank/>\n//         <ImageProcessingField \n//           onInputChange={onInputChange} onButtonSubmit={onButtonSubmit}  \n//         />\n//         <Facerecognition imageUrl={imageUrl}  />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CORRECTED DISCORD CODE BY ChatGPT\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport ParticlesBg from 'particles-bg';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport ImageProcessingField from './components/ImageProcessingField/ImageProcessingField';\nimport Facerecognition from './components/Facerecognition/Facerecognition';\nimport axios from 'axios';\nwindow.process={}\n\nconst app = new Clarifai.App({\n  apiKey: 'b99b35c39d5a491d956f588c06afd1a0'\n});\n\nconst returnClarifaiRequestOptions = (imageUrl) => {\n  const PAT = '70d2b99eec204856bc2886b35b22b05d';\n  const USER_ID = 'ianthedeveloper';\n  const APP_ID = 'my-first-application';\n  const IMAGE_URL = imageUrl;\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [\n      {\n        \"data\": {\n          \"image\": {\n            \"url\": IMAGE_URL\n          }\n        }\n      }\n    ]\n  });\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT // Added space after 'Key'\n    },\n    body: raw\n  };\n\n  return requestOptions;\n}\n\nfunction App() {\n  const MODEL_ID = 'face-detection';\n  const [input, setInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n\n  const onInputChange = (event) => {\n    console.log(event.target.value);\n    setInput(event.target.value); // Removed wrapping input with curly braces\n  }\n\n  // const onButtonSubmit = () => {\n  //   setImageUrl(input);\n  //   app.models.predict('face-detection', input)\n  //     .then(response => {\n  //       console.log(response);\n  //       return fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(input))\n  //     })\n  //     .then(response => {\n  //       response.json()\n  //       // console.log(\"Response: \", response)\n  //     })\n  //     .then(result => console.log(result))\n  //     .catch(error => console.log(\"There was an error\", error));\n  // }\n\n  // return (\n  //   <div className=\"App\">\n  //     <ParticlesBg className=\"particlesBg\" num={331} type=\"fountain\" bg={true} />\n  //     <Navigation />\n  //     <Logo />\n  //     <Rank />\n  //     <ImageProcessingField\n  //       onInputChange={onInputChange} onButtonSubmit={onButtonSubmit}\n  //     />\n  //     <Facerecognition imageUrl={imageUrl} />\n  //   </div>\n  // );\n\n  const onButtonSubmit = () => {\n    setImageUrl(input);\n    app.models.predict('face-detection', input)\n      .then(response => {\n        console.log(response);\n        // Assuming you need to pass the response to the second request\n        return fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", returnClarifaiRequestOptions(input))\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n            return response.json();\n          })\n          .then(result => {\n            console.log(result);\n            // Further processing of result if needed\n          })\n          .catch(error => {\n            console.error('Error while fetching:', error);\n          });\n      })\n      .catch(error => {\n        console.error('Clarifai API error:', error);\n      });\n  }  \n}\n\nexport default App;\n\n\n\n\n\n\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAcA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAgBA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,oBAAoB,MAAM,wDAAwD;AACzF,OAAOC,eAAe,MAAM,8CAA8C;AAC1E,OAAOC,KAAK,MAAM,OAAO;AACzBC,MAAM,CAACC,OAAO,GAAC,CAAC,CAAC;AAEjB,MAAMC,GAAG,GAAG,IAAIT,QAAQ,CAACU,GAAG,CAAC;EAC3BC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,MAAMC,4BAA4B,GAAIC,QAAQ,IAAK;EACjD,MAAMC,GAAG,GAAG,kCAAkC;EAC9C,MAAMC,OAAO,GAAG,iBAAiB;EACjC,MAAMC,MAAM,GAAG,sBAAsB;EACrC,MAAMC,SAAS,GAAGJ,QAAQ;EAE1B,MAAMK,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzB,aAAa,EAAE;MACb,SAAS,EAAEL,OAAO;MAClB,QAAQ,EAAEC;IACZ,CAAC;IACD,QAAQ,EAAE,CACR;MACE,MAAM,EAAE;QACN,OAAO,EAAE;UACP,KAAK,EAAEC;QACT;MACF;IACF,CAAC;EAEL,CAAC,CAAC;EAEF,MAAMI,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGT,GAAG,CAAC;IAChC,CAAC;IACDU,IAAI,EAAEN;EACR,CAAC;EAED,OAAOG,cAAc;AACvB,CAAC;AAED,SAASX,GAAGA,CAAA,EAAG;EAAAe,EAAA;EACb,MAAMC,QAAQ,GAAG,gBAAgB;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,QAAQ,EAAEgB,WAAW,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMgC,aAAa,GAAIC,KAAK,IAAK;IAC/BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IAC/BP,QAAQ,CAACG,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BP,WAAW,CAACF,KAAK,CAAC;IAClBlB,GAAG,CAAC4B,MAAM,CAACC,OAAO,CAAC,gBAAgB,EAAEX,KAAK,CAAC,CACxCY,IAAI,CAACC,QAAQ,IAAI;MAChBR,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;MACrB;MACA,OAAOC,KAAK,CAAC,qCAAqC,GAAGf,QAAQ,GAAG,UAAU,EAAEd,4BAA4B,CAACe,KAAK,CAAC,CAAC,CAC7GY,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDL,IAAI,CAACM,MAAM,IAAI;QACdb,OAAO,CAACC,GAAG,CAACY,MAAM,CAAC;QACnB;MACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACdf,OAAO,CAACe,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACN,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAI;MACdf,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C,CAAC,CAAC;EACN,CAAC;AACH;AAACtB,EAAA,CA/DQf,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAiEZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}